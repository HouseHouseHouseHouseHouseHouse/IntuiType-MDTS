%!PS-Adobe-3.0

%   Copyright 2022 Jacob Bates
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.

% Section Parameters
/FontHeight 12 def
/Leading 0.15 def

/ColumnPortions [ 1 ] def

% Header Parameters
/HeaderLeft { } def
/HeaderCenter { } def
/HeaderRight { } def

/HeaderFontHeight 12 def
/HeaderLeading 0.15 def

% Footer Parameters
/FooterLeft { } def
/FooterCenter { } def
/FooterRight { } def

/FooterFontHeight 12 def
/FooterLeading 0.15 def


% Variables
/PaddingX 0 in def
/SectionOffset 0 in def
/TempSectionOffset 0 in def

/documentPage 1 def
/pageColumn 0 def
/pageLine 0 def


% Get Position and Width of Current Line
% - --> width x y
/Line {

    PageWidth MarginLeft MarginRight add sub                        % available                     Total space between margins

    pageLine type /nametype ne                                      % available contentMode         If we're dealing with content, deal with columns and padding
    {

        % This part finds the width of each portion of column distribution
        ColumnPortions length 1 sub Gutter mul sub                  % available                     Account for gutters
        ColumnPortions aload pop                                    % available ptn..               All portion values
        ColumnPortions length 1 sub { add } repeat                  % available ptns                Sum them up
        div                                                         % ptnWidth                      Width of each portion

        % This part finds the width of the line
        ColumnPortions pageColumn get                               % ptnWidth curPtns              Portions in current column
        1 index mul                                                 % ptnWidth width                Width of current column
        PaddingX 2 mul sub                                          % ptnWidth width                Account for padding

        % This part finds the X-value of the start of the line
        0 0 1 pageColumn 1 sub { ColumnPortions exch get add } for  % ptnWidth width lPtns          Total portions in columns to the left
        2 index mul pageColumn Gutter mul add MarginLeft add        % ptnWidth width x              X-value of column (add columns, gutters, and margin to the left)
        PaddingX add                                                % ptnWidth width x              Account for padding

        3 -1 roll pop                                               % width x

        % This part finds the Y-value of the line
        TempSectionOffset SectionOffset gt                          % width x tempGreater
        { TempSectionOffset } { SectionOffset } ifelse              % width x offset                Use the temporary offset if it's greater
        MarginTop add PageHeight exch sub pageLine                  % width x top line              Top margin/top of section and line number
        FontHeight Leading 1 add mul                                % width x top line spacing      Spacing per line
        mul FontHeight add sub                                      % width x y                     Pointer is at bottom of line

    } {

        % This part finds the position of the header/footer line
        MarginLeft                                                  % width x                       X-value of left margin

        pageLine /header eq                                         % width x header                Is this the header?
        {
            PageHeight MarginTop sub                                % width x top                   If so, top margin
            FontHeight Leading 1 add mul add                        % width x y                     Go up one line
        } {
            MarginBottom                                            % width x bottom                Otherwise, bottom margin
            FontHeight Leading 2 add mul sub                        % width x y                     Go down one line (pointer is at bottom of line)
        } ifelse

    } ifelse                                                        % width x y

} def

% Advance to Next Line/Column/Page
/NextLine {

    /pageLine pageLine 1 add def                                    %                               Next line

    Line MarginBottom lt                                            % width x overflow              Is this line in the bottom margin?
    { NextColumn } if                                               % width x                       If so, next column

    pop pop                                                         %

} def

% Advance to Next Column/Page
/NextColumn {

    /pageLine 0 def                                                 %                               Reset line

    /TempSectionOffset 0 def                                        %                               Reset any section offset made for column preservation

    /pageColumn pageColumn 1 add def                                %                               Next column

    pageColumn ColumnPortions length eq                             % overflow                      Are we out of columns?
    { NextPage } if                                                 %                               If so, next page

} def

% Advance to Next Page
/NextPage {

    PrintHeaderFooter showpage                                      %                               Finish off that page and start a new one
    NextHeaderFooter                                                %                               Update Header/Footer

    /pageLine 0 def                                                 %                               Reset line
    /pageColumn 0 def                                               %                               Reset column

    /TempSectionOffset 0 def                                        %                               Reset any section offset made for column preservation
    /SectionOffset 0 def                                            %                               Reset section offset

    /documentPage documentPage 1 add def                            %                               Increment page number

} def

% Set Up New Section
% FontHeight Leading ColumnPortions --> -
%
% Set ColumnPortions to zero to preserve columns between
% sections
/NewSection {

    dup 0 eq dup /presColumns exch def                              % FontHeight Leading ColumnPortions presColumns     Keep track of whether the columns should be preserved
    { pop } { /ColumnPortions exch def } ifelse                     % FontHeight Leading                                We can set this parameter as it doesn't affect Y-value

    pageColumn 0 eq presColumns or                                  % FontHeight Leading changeColumns      Have we either used only one column or are using the same columns?
    {
        Line FontHeight add PageHeight MarginTop sub exch sub       % FontHeight Leading width x y          If so, calculate offset from the top of this line
        presColumns { /TempSectionOffset } { /SectionOffset } ifelse% FontHeight Leading width x y /var     If we're preserving columns, we'll only be offsetting until the next column
        exch def pop pop                                            % FontHeight Leading                    We can start the section where we are
    } {
        NextPage /SectionOffset 0 def                               % FontHeight Leading                    Otherwise, we must start the section on the next page
    } ifelse

    /Leading exch def                                               % FontHeight                    Set section parameters
    /FontHeight exch def                                            %

    /pageLine 0 def                                                 %                               Reset line
    presColumns not { /pageColumn 0 def } if                        %                               Reset column if necessary

} def

% Print Header and Footer
/PrintHeaderFooter {

    count /ignore exch def                                          %                               Ignore items in stack below this

    /sectionFontHeight FontHeight def                               %                               Preserve section parameters
    /sectionLeading Leading def                                     %

    /pageLine /header def                                           %                               Header line

    /FontHeight HeaderFontHeight def                                %                               Use header parameters
    /Leading HeaderLeading def                                      %

    HeaderLeft count ignore sub 0 CalcLine
    pop false 0 0 PrintLine count ignore sub { pop } repeat         %                               Print left-aligned part of header
    HeaderCenter count ignore sub 0 CalcLine
    pop false 1 0 PrintLine count ignore sub { pop } repeat         %                               Print centre-aligned part of header
    HeaderRight count ignore sub 0 CalcLine
    pop false 2 0 PrintLine count ignore sub { pop } repeat         %                               Print right-aligned part of header

    /pageLine /footer def                                           %                               Footer line

    /FontHeight FooterFontHeight def                                %                               Use header parameters
    /Leading HeaderLeading def                                      %

    FooterLeft count ignore sub 0 CalcLine
    pop false 0 0 PrintLine count ignore sub { pop } repeat         %                               Print left-aligned part of footer
    FooterCenter count ignore sub 0 CalcLine
    pop false 1 0 PrintLine count ignore sub { pop } repeat         %                               Print centre-aligned part of footer
    FooterRight count ignore sub 0 CalcLine
    pop false 2 0 PrintLine count ignore sub { pop } repeat         %                               Print right-aligned part of footer

    /FontHeight sectionFontHeight def                               %                               Restore section parameters
    /Leading sectionLeading def                                     %

} def

% Update Header/Footer
/NextHeaderFooter {

    /HeaderLeading /NextHeaderLeading NextVariable                  %                           Set header parameters
    /HeaderFontHeight /NextHeaderFontHeight NextVariable            %

    /HeaderRight /NextHeaderRight NextVariable                      %                           Set header item routines
    /HeaderCenter /NextHeaderCenter NextVariable                    %
    /HeaderLeft /NextHeaderLeft NextVariable                        %

    /FooterLeading /NextFooterLeading NextVariable                  %                           Set footer parameters
    /FooterFontHeight /NextFooterFontHeight NextVariable            %

    /FooterRight /NextFooterRight NextVariable                      %                           Set footer item routines
    /FooterCenter /NextFooterCenter NextVariable                    %
    /FooterLeft /NextFooterLeft NextVariable                        %

} def

% Update Variable
% /dest /next --> -
/NextVariable {

    dup currentdict exch known                                      % /dest /next defined       Is the "next" value defined?
    {
        2 copy load def                                             % /dest /next               If so, set the variable to it
    } if

    currentdict exch undef pop                                      %                           Undefine to avoid overwriting any possible changes next time

} def

% Begin Document
/Begin {

} def

% End Document
/End {

    PrintHeaderFooter showpage                                      %                           Finish off final page

} def

% Calculate a Line of Words
% /f (word1) [/f] (word2)..[/f] (wordX) maxItems indent --> /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width final
%
% The stack should contain the remaining words in a paragraph,
% starting from the base, with optional font names below each
% word. This procedure will only manipulate the number of things
% specified in the stack. Words that will fit in one line will
% be placed at the top and a font name will be placed before
% each.
/CalcLine {

                                                                % /f (word1) [/f] (word2)..[/f] (wordX) maxItems indent
    /curWidth 0 def                                             % /f (word1) [/f] (word2)..[/f] (wordX) maxItems indent     If a word fits, the total width is here
    /nxtWidth 0 def                                             % /f (word1) [/f] (word2)..[/f] (wordX) maxItems indent     Used to check if a word will fit with previous whitespace
    /curWords 0 def

    /maxWidth Line pop pop                                      % /f (word1) [/f] (word2)..[/f] (wordX) maxItems indent /v width        Maximum line width
    2 index Indent mul sub def pop                              % /f (word1) [/f] (word2)..[/f] (wordX) maxItems                        Account for indentation if necessary

    /maxItems exch 1 add def                                    % /f (word1) [/f] (word2)..[/f] (wordX)         Stack item count

    0                                                           % /f (word1) [/f] (word2)..[/f] (wordX) 0       Mark the end of the paragraph

    {

        % This part checks what's next, it may not be a word
        /final true def                                         % [/f] (cur)../f (pre)              If we exit, this is the final line

        maxItems -1 roll                                        % ../f (pre) [(cur) OR /f OR 0]     Bring up current word, next font name, or end mark

        dup 0 eq { maxItems 1 roll exit } if                    % ../f (pre) [(cur) OR /f]          If this is the end mark, replace it and exit

        dup type /nametype eq
        {
                                                                % (cur) [/f] (nxt)../f (pre) /f
            /curFontFace exch def                               % (cur) [/f] (nxt)../f (pre)        If this is a font name, set variable
            /maxItems maxItems 1 sub def                        % (cur) [/f] (nxt)../f (pre)        Account for lost item

        } {
                                                                % [/f] (nxt)../f (pre) (cur)
            curFontFace exch                                    % [/f] (nxt)../f (pre) /f (cur)     Otherwise, bury current font for print routine
            /maxItems maxItems 1 add def                        % [/f] (nxt)../f (pre) /f (cur)     Account for additional item

            % This part checks if the word will fit in the line
            /final false def                                    % [/f] (nxt)../f (cur)              If we exit, this isn't the final line

            curFontFace findfont FontHeight scalefont setfont   % [/f] (nxt)../f (cur)              Set word font
            dup stringwidth pop nxtWidth add                    % [/f] (nxt)../f (cur) width        Width of line including this word
            dup maxWidth gt { pop maxItems 2 roll exit } if     % [/f] (nxt)../f (cur) width        If word doesn't fit, stop here
            /curWidth exch def                                  % [/f] (nxt)../f (cur)              Otherwise, add to width
            /curWords curWords 1 add def                        % [/f] (nxt)../f (cur)              Increment word counter

            % This part adds whitespace in case the next word also fits
            /nxtWidth ( ) stringwidth pop curWidth add def      % [/f] (nxt)../f (cur)              Width of line including this word with whitespace

        } ifelse

    } loop

                                                                % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) 0 /f (word1)../f (wordN)
    curWords 2 mul 1 add -1 roll pop                            % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN)
    curWords curWidth final                                     % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width final

} def

% Print a Line of Words 
% /f (word1)../f (wordN) N width justify align indent --> -
%
% The stack should contain a font name for every word in the line.
% All words will be printed onto the current line.
/PrintLine {

    % This part calculates the remaining space in the line      % /f (word1)../f (wordN) N width justify align indent
    4 -1 roll                                                   % /f (word1)../f (wordN) N justify align indent width
    Line pop pop                                                % /f (word1)../f (wordN) N justify align indent width maxWidth      Maximum line width
    2 index Indent mul sub                                      % /f (word1)../f (wordN) N justify align indent width maxWidth      Account for indentation if necessary
    exch sub                                                    % /f (word1)../f (wordN) N justify align indent balance             Amount of space remaining
    4 -2 roll exch                                              % /f (word1)../f (wordN) N indent balance align justify

    % This part calculates the err for justifying
    /err 0 def
    /charErr 0 def
    {
                                                                % /f (word1)../f (wordN) N indent balance align
        pop 2 index                                             % /f (word1)../f (wordN) N indent balance N
        dup 1 ne                                                % /f (word1)../f (wordN) N indent balance N plural      Is there more than one word in this line?
        {
            1 sub div                                           % /f (word1)../f (wordN) N indent err                   If so, calculate points to add to whitespace
            /err exch def                                       % /f (word1)../f (wordN) N indent
        } {
            pop 4 index length                                  % /f (word1)../f (wordN) N indent chars                 Otherwise, number of chars in word
            1 sub div                                           % /f (word1)../f (wordN) N indent charErr               Calculate points to add to each char
            /charErr exch def                                   % /f (word1)../f (wordN) N indent
        } ifelse

        Line 3 -1 roll pop                                      % /f (word1)../f (wordN) N indent x y                   Use default X-value to start at left margin

    }

    % This part calculates the offset for aligning
    {

                                                                % /f (word1)../f (wordN) N indent balance align
        2 div mul                                               % /f (word1)../f (wordN) N indent offset                Offset to align to the right side
        Line exch 4 -2 roll pop                                 % /f (word1)../f (wordN) N indent y x offset            Default X-value
        add exch                                                % /f (word1)../f (wordN) N indent x y                   Add offset to align properly

    } ifelse                                                    % /f (word1)../f (wordN) N indent x y

    % This part positions the pointer
    3 1 roll exch Indent mul add exch                           % /f (word1)../f (wordN) N x y                          Account for indentation if necessary
    moveto                                                      % /f (word1)../f (wordN) N                              Move pointer

    % This part prints each word
    -1 1 {

                                                                % /f (cur)../f (wordN) i                i = words remaining
        dup 2 mul 1 add -2 roll                                 % /f (nxt)../f (wordN) i /f (cur)       Bring up current word or next font name
        exch findfont FontHeight scalefont setfont              % /f (nxt)../f (wordN) i (cur)          Set word font
        charErr exch 0 exch ashow                               % /f (nxt)../f (wordN) i                Print current word with any char err

        1 gt { err 0 ( ) ashow } if                             % /f (nxt)../f (wordN)                  If there are more words, print whitespace with extra points

    } for                                                       %                                   Loop through all words

} def

% Print a Paragraph
% BASE /f (word1) [/f] (word2)..[/f] (wordX) indent indent1 justify align -> BASE -
%
% The stack should consist of only the words in the paragraph.
% Words are individual strings optionally preceded by a font
% name. The first word is at the base of the stack and it must
% have a font name.
%
% Alignment is specified using an integer. 0 means left-align, 1
% means centre-align, and 2 means right-align. Whether the first
% line should be indented and whether the paragraph should be
% justified are specified using booleans.
/PrintParagraph {

    /PaddingX 0 in def                                          % /f (word1)..[/f] (wordX) indent indent1 justify align     No padding
    /align exch def                                             % /f (word1)..[/f] (wordX) indent indent1 justify
    /justify exch def                                           % /f (word1)..[/f] (wordX) indent indent1

    /indent exch { 1 } { 0 } ifelse def                         % /f (word1)..[/f] (wordX) indent       First line indent
    /defaultIndent exch { 1 } { 0 } ifelse def                  % /f (word1)..[/f] (wordX)              Default indent

    {

        count indent CalcLine                                   % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width final                            Calculate a line
        dup not justify and align indent 4 -1 roll              % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width justify align indent final       Set up printing parameters and condition
        { PrintLine exit } { PrintLine } ifelse                 % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX)                                                                 Print line, exit if we're done
        NextLine                                                % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX)                                                                 Next line/column/page

        /indent defaultIndent def                               % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX)     Revert to default indent

    } loop

    NextLine                                                    %                                   We didn't advance a line last time

} def

% Print a List Item
% BASE /f (word1) [/f] (word2)..[/f] (wordX) /f (index) order -> BASE -
/PrintListItem {

    /PaddingX 0 in def                                          % /f (word1) [/f] (word2)..[/f] (wordX) /f (index) order        No padding
    /indent exch def                                            % /f (word1) [/f] (word2)..[/f] (wordX) /f (index)              Times to indent for index

    exch findfont FontHeight scalefont setfont                  % /f (word1) [/f] (word2)..[/f] (wordX) (index)     Set index font

    Line exch indent 0.5 add Indent mul add                     % /f (word1) [/f] (word2)..[/f] (wordX) (index) width y x       Indent halfway
    3 index stringwidth pop sub exch moveto pop                 % /f (word1) [/f] (word2)..[/f] (wordX) (index)                 Align prefix to end at that point

    show                                                        % /f (word1) [/f] (word2)..[/f] (wordX)             Print index

    /indent indent 1 add def                                    % /f (word1) [/f] (word2)..[/f] (wordX)             Indent once more past the index

    {

        count indent CalcLine                                   % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width final                            Calculate a line
        dup not 0 indent 4 -1 roll                              % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX) /f (word1)../f (wordN) N width justify align indent final       Set up printing parameters and condition
        { PrintLine exit } { PrintLine } ifelse                 % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX)                                                                 Print line, exit if we're done
        NextLine                                                % /f (wordN+1) [/f] (wordN+2)..[/f] (wordX)                                                                 Next line/column/page

    } loop

    NextLine                                                    %                                   We didn't advance a line last time

} def

% Print a Rule
/PrintRule {

    /PaddingX Indent 2 div def                                  %                                   Pad by half the indentation amount

    newpath                                                     %                                   New path

    Line moveto                                                 % width                             Move pointer to current line
    0 FontHeight 2 div rmoveto                                  % width                             Center of line
    0 rlineto                                                   %                                   Symmetric rule

    gsave                                                       %                                   Save Graphics Context

    0.5 setgray 1 setlinewidth 2 setlinecap                     %                                   Grey, 1 pt line, square cap
    stroke                                                      %                                   Draw

    grestore                                                    %                                   Restore Graphics Context

    NextLine                                                    %                                   Don't use this line

} def
